other_pos = colDef(show = FALSE),
subsense1 = colDef(show = FALSE),
subsense2 = colDef(show = FALSE),
linker = colDef(name = "Коннектор"),
source = colDef(name = "Источник"),
pos = colDef(name = "Часть речи",aggregate = JS(custom_aggr)),
sense = colDef(name = "Значение"),
semfield1 = colDef(name = "Семантическое поле 1",aggregate = JS(custom_aggr)),
semfield2 = colDef(name = "Семантическое поле 2", aggregate = JS(custom_aggr))
))
))
library(DT)
datatable(iris)
reactable(linkers,
defaultPageSize = 100,
filterable = TRUE,
searchable = FALSE,
showSortable = TRUE,
showSortIcon = TRUE,
groupBy = c("linker", "source"),
columns = list(
ptclass = colDef(show = FALSE),
other_senses = colDef(show = FALSE),
other_pos = colDef(show = FALSE),
subsense1 = colDef(show = FALSE),
subsense2 = colDef(show = FALSE),
linker = colDef(name = "Коннектор",
filterMethod = JS("
")),
source = colDef(name = "Источник"),
pos = colDef(name = "Часть речи",aggregate = JS(custom_aggr)),
sense = colDef(name = "Значение"),
semfield1 = colDef(name = "Семантическое поле 1",aggregate = JS(custom_aggr)),
semfield2 = colDef(name = "Семантическое поле 2", aggregate = JS(custom_aggr))
),
elementId = "linkertbl")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages(c("tidyverse", "reactable", "dplyr", "htmltools"))
install.packages("rlang")
install.packages("rlang")
install.packages("tidyverse")
install.packages("ragg")
library(dplyr)
library(tidyverse)
install.package(tidyverse)
install.packages("tidyverse","reactable")
library(reactable)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("reactable")
remove(linkers)
remove(custom_aggr)
source("shared.R")
reactable(linkers,
defaultPageSize = 100,
filterable = TRUE,
searchable = FALSE,
showSortable = TRUE,
showSortIcon = TRUE,
groupBy = c("linker", "source"),
columns = list(
pos.type = colDef(show = FALSE),
other_senses = colDef(show = FALSE),
other_pos = colDef(show = FALSE),
subfield1 = colDef(show = FALSE),
subfield2 = colDef(show = FALSE),
linker = colDef(name = "Коннектор"),
source = colDef(name = "Источник",
filterInput = filterList),
pos = colDef(name = "Часть речи",
aggregate = JS(custom_aggr),
filterInput = filterList),
meaning = colDef(name = "Значение"),
semfield1 = colDef(name = "Семантическое поле 1",
aggregate = JS(custom_aggr),
filterInput = filterList),
semfield2 = colDef(name = "Семантическое поле 2",
aggregate = JS(custom_aggr),
filterInput = filterList)
),
details = function(index) { detailsFunc(index, linkers) },
elementId = "linkertbl1")
reactable(linkers,
defaultPageSize = 100,
filterable = TRUE,
searchable = FALSE,
showSortable = TRUE,
showSortIcon = TRUE,
groupBy = c("linker", "semfield1"),
columns = list(
pos.type = colDef(show = FALSE),
other_senses = colDef(show = FALSE),
other_pos = colDef(show = FALSE),
subfield1 = colDef(show = FALSE),
subfield2 = colDef(show = FALSE),
linker = colDef(name = "Коннектор"),
source = colDef(name = "Источник",
filterInput = filterList),
pos = colDef(name = "Часть речи",
aggregate = JS(custom_aggr),
filterInput = filterList),
meaning = colDef(name = "Значение"),
semfield1 = colDef(name = "Семантическое поле 1",
aggregate = JS(custom_aggr),
filterInput = filterList),
semfield2 = colDef(name = "Семантическое поле 2",
aggregate = JS(custom_aggr),
filterInput = filterList)
),
details = function(index) { detailsFunc(index, linkers) },
elementId = "linkertbl2")
source("shared.R")
linkers %>%
group_by(linker,semfield1) %>%
summarise(source = paste(source, sep=", ") -> newlinkers
linkers %>%
group_by(linker,semfield1) %>%
summarise(source = paste(source, sep=", ")) -> newlinkers
View(newlinkers)
View(newlinkers)
linkers %>%
group_by(linker,semfield1) %>%
summarise(source = paste(source, sep=", "),
meaning = paste(meaning, sep=", ")) -> newlinkers
View(newlinkers)
linkers %>%
group_by(linker,semfield1) %>%
summarise(source = paste0(source, collapse=", "),
meaning = paste0(meaning, collapse="; ")) -> newlinkers
View(newlinkers)
linkers %>%
group_by(linker,semfield1) %>%
summarise(source = paste0(unique(source), collapse=", "),
meaning = paste0(unique(meaning), collapse="; ")) -> newlinkers
View(newlinkers)
linkers %>%
group_by(linker,semfield1) %>%
summarise_all(paste0(unique(.x), collapse=": ")
) -> newlinkers
source("shared.R")
linkers %>%
group_by(linker,semfield1) %>%
summarise_all(paste0(unique(.x), collapse=": ")
) -> newlinkers
linkers %>%
group_by(linker,semfield1) %>%
summarise_all(~ paste0(unique(.x), collapse=": ")
) -> newlinkers
View(newlinkers)
write.csv(newlinkers, "letter-a-merged.csv")
library(tidyverse)
install.packages(c("tidyverse", "dplyr", "reactable", "htmltools", "rmarkdown"))
install.packages(ragg)
install.packages("ragg")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(reactable)
library(htmltools)
install.packages("openxlsx", dependencies = TRUE)
source("shared.R")
library("openxlsx")
linkers %>%
group_by(linker,semfield1) %>%
summarise_all(~ paste0(unique(.x), collapse=": ")
) -> newlinkers
# summarise(source = paste0(unique(source), collapse=", "),
#           meaning = paste0(unique(meaning), collapse="; "),
#           parts.num = paste0(unique(parts.num), collapse="; ")
#           ) -> newlinkers
write.xlsx(newlinkers, "june23-all-new-merged.xlsx")
library(tidyverse)
install.packages("rmarkdown")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(reactable)
library(htmltools)
knitr::opts_chunk$set(echo=FALSE, message=FALSE)
# Load data
read.csv("nov23-all.csv",stringsAsFactors = FALSE) -> linkers
# Change POS, semantic fields, classes to factors
mutate(linkers,
form = as.character(form),
semfield1_ed = as.factor(semfield1_ed),
subfield1_ed = as.factor(subfield1_ed),
semfield2_ed = as.factor(semfield2_ed),
subfield2_ed = as.factor(subfield2_ed),
sem_comment = as.character(sem_comment),
#м.б. как фактор, но надо нормализовать содержимое
inside_info = as.character(inside_info),
dict = as.factor(dict),
pos = as.factor(pos),
pos.type = as.factor(pos.type),
meaning = as.character(meaning),
other_senses = as.character(other_senses),
other_pos = as.factor(other_pos),
phonvar = as.character(phonvar),
example = as.character(Example),
parts.num = as.factor(parts.num),
parts.order = as.factor(parts.order),
linker_position = as.factor(linker_position),
style = as.factor(style),
mainpart = as.character(mainpart),
correl = as.character(correl),
correl.oblig = as.factor(correl.oblig),
comp.oblig = as.factor(comp.oblig),
comment = as.character(comment),
.keep = "none"
) -> linkers
View(linkers)
mutate(linkers,
form = as.character(form),
semfield1_ed = as.factor(semfield1_ed),
subfield1_ed = as.factor(subfield1_ed),
semfield2_ed = as.factor(semfield2_ed),
subfield2_ed = as.factor(subfield2_ed),
sem_comment = as.character(sem_comment),
#м.б. как фактор, но надо нормализовать содержимое
inside_info = as.character(inside_info),
dict = as.factor(dict),
pos = as.factor(pos),
pos.type = as.factor(pos.type),
meaning = as.character(meaning),
other_senses = as.character(other_senses),
other_pos = as.factor(other_pos),
phonvar = as.character(phonvar),
example = as.character(Example),
parts.num = as.factor(parts.num),
parts.order = as.factor(parts.order),
linker_position = as.factor(linker_position),
style = as.factor(style),
mainpart = as.character(mainpart),
correl = as.character(correl),
correl.oblig = as.factor(correl.oblig),
comp.oblig = as.factor(comp.oblig),
comment = as.character(comment),
) -> linkers
# Load data
read.csv("nov23-all.csv",stringsAsFactors = FALSE) -> linkers
# Change POS, semantic fields, classes to factors
mutate(linkers,
form = as.character(form),
semfield1_ed = as.factor(semfield1_ed),
subfield1_ed = as.factor(subfield1_ed),
semfield2_ed = as.factor(semfield2_ed),
subfield2_ed = as.factor(subfield2_ed),
sem_comment = as.character(sem_comment),
#м.б. как фактор, но надо нормализовать содержимое
inside_info = as.character(inside_info),
dict = as.factor(dict),
pos = as.factor(pos),
pos.type = as.factor(type.of.pos),
meaning = as.character(meaning),
other_senses = as.character(other_senses),
other_pos = as.factor(other_pos),
phonvar = as.character(phonvar),
example = as.character(Example),
parts.num = as.factor(parts.num),
parts.order = as.factor(parts.order),
linker_position = as.factor(linker_position),
style = as.factor(style),
mainpart = as.character(mainpart),
correl = as.character(correl),
correl.oblig = as.factor(correl.oblig),
comp.oblig = as.factor(comp.oblig),
comment = as.character(comment),
) -> linkers
read.csv("nov23-all.csv",stringsAsFactors = FALSE) -> linkers
mutate(linkers,
form = as.character(form),
semfield1_ed = as.factor(semfield1_ed),
subfield1_ed = as.factor(subfield1_ed),
semfield2_ed = as.factor(semfield2_ed),
subfield2_ed = as.factor(subfield2_ed),
sem_comment = as.character(sem_comment),
#м.б. как фактор, но надо нормализовать содержимое
inside_info = as.character(inside_info),
dict = as.factor(dict),
pos = as.factor(pos),
pos.type = as.factor(type.of.pos),
meaning = as.character(meaning),
other_senses = as.character(other_senses),
other_pos = as.factor(other_pos),
phonvar = as.character(phonvar),
example = as.character(Example),
parts.num = as.factor(parts.num),
parts.order = as.factor(parts.order),
linker_position = as.factor(linker_position),
style = as.factor(style),
mainpart = as.character(mainpart),
correl = as.character(correl),
correl.oblig = as.factor(correl.oblig),
comp.oblig = as.factor(comp.oblig),
comment = as.character(comment),
) -> linkers
# Load data
read.csv("nov23-all.csv",stringsAsFactors = FALSE) -> linkers
# Change POS, semantic fields, classes to factors
mutate(linkers,
form = as.character(form),
semfield1_ed = as.factor(semfield1_ed),
subfield1_ed = as.factor(subfield1_ed),
semfield2_ed = as.factor(semfield2_ed),
subfield2_ed = as.factor(subfield2_ed),
sem_comment = as.character(sem_comment),
#м.б. как фактор, но надо нормализовать содержимое
inside_info = as.character(inside_info),
dict = as.factor(dict),
pos = as.factor(pos),
pos.type = as.factor(type.of.pos),
meaning = as.character(meaning),
other_senses = as.character(other_senses),
other_pos = as.factor(other_pos),
phonvar = as.character(phonvar),
example = as.character(example),
parts.num = as.factor(parts.num),
parts.order = as.factor(parts.order),
linker_position = as.factor(linker_position),
style = as.factor(style),
mainpart = as.character(mainpart),
correl = as.character(correl),
correl.oblig = as.factor(correl.oblig),
comp.oblig = as.factor(comp.oblig),
comment = as.character(comment),
) -> linkers
# Load data
read.csv("nov23-all.csv",stringsAsFactors = FALSE) -> linkers
# Change POS, semantic fields, classes to factors
mutate(linkers,
form = as.character(form),
semfield1_ed = as.factor(semfield1_ed),
subfield1_ed = as.factor(subfield1_ed),
semfield2_ed = as.factor(semfield2_ed),
subfield2_ed = as.factor(subfield2_ed),
sem_comment = as.character(sem_comment),
#м.б. как фактор, но надо нормализовать содержимое
inside_info = as.character(inside_info),
dict = as.factor(dict),
pos = as.factor(pos),
pos.type = as.factor(type.of.pos),
meaning = as.character(meaning),
other_senses = as.character(other_senses),
other_pos = as.factor(other_pos),
phonvar = as.character(phonvar),
example = as.character(example),
parts.num = as.factor(parts.num),
parts.order = as.factor(parts.order),
linker_position = as.factor(linker_position),
style = as.factor(style),
mainpart = as.character(mainpart),
correl = as.character(correl),
correl.oblig = as.factor(correl.oblig),
comp.oblig = as.factor(comp.oblig),
comment = as.character(comment),
.keep = "none"
) -> linkers
linkers.dict
linkers$dict
levels(linkers$dict)
levels(linkers$parts_num)
levels(linkers$parts.num)
levels(linkers$parts.order)
levels(linkers$linker_position)
levels(linkers$pos)
# Load data
read.csv("nov23-all.csv",stringsAsFactors = FALSE) -> linkers
# Change POS, semantic fields, classes to factors
mutate(linkers,
form = as.character(form),
semfield1_ed = as.factor(semfield1_ed),
subfield1_ed = as.factor(subfield1_ed),
semfield2_ed = as.factor(semfield2_ed),
subfield2_ed = as.factor(subfield2_ed),
sem_comment = as.character(sem_comment),
#м.б. как фактор, но надо нормализовать содержимое
inside_info = as.character(inside_info),
dict = as.factor(dict),
pos = as.character(pos),
pos.type = as.factor(type.of.pos),
meaning = as.character(meaning),
other_senses = as.character(other_senses),
other_pos = as.factor(other_pos),
phonvar = as.character(phonvar),
example = as.character(example),
parts.num = as.factor(parts.num),
parts.order = as.factor(parts.order),
linker_position = as.factor(linker_position),
style = as.factor(style),
mainpart = as.character(mainpart),
correl = as.character(correl),
correl.oblig = as.factor(correl.oblig),
comp.oblig = as.factor(comp.oblig),
comment = as.character(comment),
.keep = "none"
) -> linkers
levels(linkers$parts.order)
levels(linkers$style)
levels(linkers$semfield1_ed)
levels(linkers$subfield1_ed)
levels(linkers$semfield2_ed)
# Load data
read.csv("nov23-all.csv",stringsAsFactors = FALSE) -> linkers
# Change POS, semantic fields, classes to factors
linkers %>%
mutate(
across(all_of(names(.)), trimws)
)
linkers %>%
mutate(
across(all_of(names(.)), trimws)
) %>%
mutate(
form = as.character(form),
semfield1_ed = as.factor(semfield1_ed),
subfield1_ed = as.character(subfield1_ed),
semfield2_ed = as.factor(semfield2_ed),
subfield2_ed = as.character(subfield2_ed),
sem_comment = as.character(sem_comment),
#м.б. как фактор, но надо нормализовать содержимое
inside_info = as.character(inside_info),
dict = as.factor(dict),
pos = as.character(pos),
pos.type = as.factor(type.of.pos),
meaning = as.character(meaning),
other_senses = as.character(other_senses),
other_pos = as.character(other_pos),
phonvar = as.character(phonvar),
example = as.character(example),
parts.num = as.factor(parts.num),
parts.order = as.factor(parts.order),
linker_position = as.factor(linker_position),
style = as.factor(style),
mainpart = as.character(mainpart),
correl = as.character(correl),
correl.oblig = as.factor(correl.oblig),
comp.oblig = as.factor(comp.oblig),
comment = as.character(comment),
.keep = "none"
) -> linkers
levels(style)
levels(linkers$style)
levels(linkers$semfield2_ed)
levels(linkers$correl.oblig)
levels(linkers$comp.oblig)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
write.xlsx(newlinkers, "nov23-all-fix-merged.xlsx")
source("shared.R")
library("openxlsx")
install.packages("openxlsx")
install.packages("openxlsx")
source("shared.R")
library("openxlsx")
linkers %>%
group_by(form,semfield1_ed) %>%
summarise_all(~ paste0(unique(.x), collapse=": ")
) -> newlinkers
# summarise(source = paste0(unique(source), collapse=", "),
#           meaning = paste0(unique(meaning), collapse="; "),
#           parts.num = paste0(unique(parts.num), collapse="; ")
#           ) -> newlinkers
write.xlsx(newlinkers, "nov23-all-fix-merged.xlsx")
c("a","b")
linkers %>%
group_by(form,semfield1_ed) %>%
summarise_all(~ paste0(unique(.x), collapse=": ")
) -> newlinkers
source("shared.R")
source("shared.R")
source("shared.R")
library(tidyverse)
library(dplyr)
library(reactable)
library(htmltools)
library(openxlsx)
knitr::opts_chunk$set(echo=FALSE, message=FALSE)
# Load data
# read.csv("nov23-all.csv",stringsAsFactors = FALSE) -> linkers
read.xlsx("all-dict Nov 2023 fix.xlsx", na.strings=c("NA",""))
source("shared.R")
library("openxlsx")
linkers %>%
group_by(form,semfield1_ed) %>%
summarise_all(~ paste0(unique(.x), collapse=": ")
) -> newlinkers
# summarise(source = paste0(unique(source), collapse=", "),
#           meaning = paste0(unique(meaning), collapse="; "),
#           parts.num = paste0(unique(parts.num), collapse="; ")
#           ) -> newlinkers
write.xlsx(newlinkers, "nov23-all-fix-merged.xlsx")
citation()
install.packages(c("tidyverse", "dplyr", "reactable", "htmltools", "openxlsx"))
install.packages(c("tidyverse", "dplyr", "reactable", "htmltools", "openxlsx"))
read.xlsx("ossetic_linkers_syntax.xlsx", na.strings=c("NA","")) -> linkers
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
CoprManager::enable()
install.packages("tidyverse")
install.packages("dplyr")
